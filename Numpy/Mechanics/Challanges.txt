#Basic Challenges:

1-Create a NumPy array with values from 0 to 9.

2-Create a 3x3 NumPy array with all elements are 1.

3-Create a NumPy array with even numbers from 2 to 20.

4-Create a NumPy array containing the square roots of the numbers from 1 to 10.

5-Create a 1D array with 10 elements and replace every even number with 0.

6-Create a 4x4 identity matrix using NumPy.

7-NumPy slicing: Given a 2D NumPy array, extract the second column.

8-Array manipulation: Create a NumPy array and reverse its elements in-place (i.e., without creating a new array).

9-Array reshaping: Create a 1D NumPy array with 12 elements. Reshape it into a 2D array with 3 rows and 4 columns.

10-Stacking arrays: Create two NumPy arrays, one with integers from 1 to 5 and another with integers from 6 to 10. Stack them horizontally to form a single 1D array.

#Medium Challenges:

11-Finding Unique Values: Create a 1D NumPy array with repeated values and find the unique values in the array.

12-Filter a NumPy array: Given an array, filter out all values greater than 5.

13-Array multiplication: Multiply two NumPy arrays of different shapes (e.g., a 2x3 array and a 3x2 array).

14-Calculate the mean and standard deviation: Calculate the mean and standard deviation of a NumPy array with random numbers.

15-Repeating arrays: Create an array and and make 10 lines array with same values

16-Matrix Operations: Given a 2D NumPy array representing a set of coordinates, compute the distance between each pair of points and store the distances in a new 2D array.

#Hard Challenges:

17-Matrix operations: Perform matrix multiplication between two randomly generated 4x4 matrices.

18-Advanced slicing: Given a 2D NumPy array, extract all even rows and odd columns and create a new array with the extracted elements.

19-Import values from txt to array, manuplate them and write to txt again.

20- Reshaping with Missing Elements: Given a flattened 1D NumPy array and its shape (number of rows and columns), write a Python function to reshape the array while accommodating missing elements. If the number of elements in the flattened array does not match the required shape, insert zeros to fill in the missing elements.